// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-playbooks/server/app (interfaces: ConditionStore)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	app "github.com/mattermost/mattermost-plugin-playbooks/server/app"
)

// MockConditionStore is a mock of ConditionStore interface.
type MockConditionStore struct {
	ctrl     *gomock.Controller
	recorder *MockConditionStoreMockRecorder
}

// MockConditionStoreMockRecorder is the mock recorder for MockConditionStore.
type MockConditionStoreMockRecorder struct {
	mock *MockConditionStore
}

// NewMockConditionStore creates a new mock instance.
func NewMockConditionStore(ctrl *gomock.Controller) *MockConditionStore {
	mock := &MockConditionStore{ctrl: ctrl}
	mock.recorder = &MockConditionStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConditionStore) EXPECT() *MockConditionStoreMockRecorder {
	return m.recorder
}

// CountConditionsUsingPropertyField mocks base method.
func (m *MockConditionStore) CountConditionsUsingPropertyField(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountConditionsUsingPropertyField", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountConditionsUsingPropertyField indicates an expected call of CountConditionsUsingPropertyField.
func (mr *MockConditionStoreMockRecorder) CountConditionsUsingPropertyField(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountConditionsUsingPropertyField", reflect.TypeOf((*MockConditionStore)(nil).CountConditionsUsingPropertyField), arg0, arg1)
}

// CountConditionsUsingPropertyOptions mocks base method.
func (m *MockConditionStore) CountConditionsUsingPropertyOptions(arg0 string, arg1 []string) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountConditionsUsingPropertyOptions", arg0, arg1)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountConditionsUsingPropertyOptions indicates an expected call of CountConditionsUsingPropertyOptions.
func (mr *MockConditionStoreMockRecorder) CountConditionsUsingPropertyOptions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountConditionsUsingPropertyOptions", reflect.TypeOf((*MockConditionStore)(nil).CountConditionsUsingPropertyOptions), arg0, arg1)
}

// CreateCondition mocks base method.
func (m *MockConditionStore) CreateCondition(arg0 string, arg1 app.Condition) (*app.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCondition", arg0, arg1)
	ret0, _ := ret[0].(*app.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCondition indicates an expected call of CreateCondition.
func (mr *MockConditionStoreMockRecorder) CreateCondition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCondition", reflect.TypeOf((*MockConditionStore)(nil).CreateCondition), arg0, arg1)
}

// DeleteCondition mocks base method.
func (m *MockConditionStore) DeleteCondition(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCondition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCondition indicates an expected call of DeleteCondition.
func (mr *MockConditionStoreMockRecorder) DeleteCondition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCondition", reflect.TypeOf((*MockConditionStore)(nil).DeleteCondition), arg0, arg1)
}

// GetCondition mocks base method.
func (m *MockConditionStore) GetCondition(arg0, arg1 string) (*app.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCondition", arg0, arg1)
	ret0, _ := ret[0].(*app.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCondition indicates an expected call of GetCondition.
func (mr *MockConditionStoreMockRecorder) GetCondition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCondition", reflect.TypeOf((*MockConditionStore)(nil).GetCondition), arg0, arg1)
}

// GetConditionsByRunAndFieldID mocks base method.
func (m *MockConditionStore) GetConditionsByRunAndFieldID(arg0, arg1 string) ([]app.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConditionsByRunAndFieldID", arg0, arg1)
	ret0, _ := ret[0].([]app.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConditionsByRunAndFieldID indicates an expected call of GetConditionsByRunAndFieldID.
func (mr *MockConditionStoreMockRecorder) GetConditionsByRunAndFieldID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConditionsByRunAndFieldID", reflect.TypeOf((*MockConditionStore)(nil).GetConditionsByRunAndFieldID), arg0, arg1)
}

// GetPlaybookConditionCount mocks base method.
func (m *MockConditionStore) GetPlaybookConditionCount(arg0 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybookConditionCount", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybookConditionCount indicates an expected call of GetPlaybookConditionCount.
func (mr *MockConditionStoreMockRecorder) GetPlaybookConditionCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybookConditionCount", reflect.TypeOf((*MockConditionStore)(nil).GetPlaybookConditionCount), arg0)
}

// GetPlaybookConditions mocks base method.
func (m *MockConditionStore) GetPlaybookConditions(arg0 string, arg1, arg2 int) ([]app.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybookConditions", arg0, arg1, arg2)
	ret0, _ := ret[0].([]app.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybookConditions indicates an expected call of GetPlaybookConditions.
func (mr *MockConditionStoreMockRecorder) GetPlaybookConditions(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybookConditions", reflect.TypeOf((*MockConditionStore)(nil).GetPlaybookConditions), arg0, arg1, arg2)
}

// GetRunConditionCount mocks base method.
func (m *MockConditionStore) GetRunConditionCount(arg0, arg1 string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunConditionCount", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunConditionCount indicates an expected call of GetRunConditionCount.
func (mr *MockConditionStoreMockRecorder) GetRunConditionCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunConditionCount", reflect.TypeOf((*MockConditionStore)(nil).GetRunConditionCount), arg0, arg1)
}

// GetRunConditions mocks base method.
func (m *MockConditionStore) GetRunConditions(arg0, arg1 string, arg2, arg3 int) ([]app.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunConditions", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]app.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunConditions indicates an expected call of GetRunConditions.
func (mr *MockConditionStoreMockRecorder) GetRunConditions(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunConditions", reflect.TypeOf((*MockConditionStore)(nil).GetRunConditions), arg0, arg1, arg2, arg3)
}

// UpdateCondition mocks base method.
func (m *MockConditionStore) UpdateCondition(arg0 string, arg1 app.Condition) (*app.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCondition", arg0, arg1)
	ret0, _ := ret[0].(*app.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCondition indicates an expected call of UpdateCondition.
func (mr *MockConditionStoreMockRecorder) UpdateCondition(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCondition", reflect.TypeOf((*MockConditionStore)(nil).UpdateCondition), arg0, arg1)
}
