// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-playbooks/server/app (interfaces: Auditor)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost/server/public/model"
)

// MockAuditor is a mock of Auditor interface.
type MockAuditor struct {
	ctrl     *gomock.Controller
	recorder *MockAuditorMockRecorder
}

// MockAuditorMockRecorder is the mock recorder for MockAuditor.
type MockAuditorMockRecorder struct {
	mock *MockAuditor
}

// NewMockAuditor creates a new mock instance.
func NewMockAuditor(ctrl *gomock.Controller) *MockAuditor {
	mock := &MockAuditor{ctrl: ctrl}
	mock.recorder = &MockAuditorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditor) EXPECT() *MockAuditorMockRecorder {
	return m.recorder
}

// LogAuditRec mocks base method.
func (m *MockAuditor) LogAuditRec(arg0 *model.AuditRecord) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogAuditRec", arg0)
}

// LogAuditRec indicates an expected call of LogAuditRec.
func (mr *MockAuditorMockRecorder) LogAuditRec(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogAuditRec", reflect.TypeOf((*MockAuditor)(nil).LogAuditRec), arg0)
}

// MakeAuditRecord mocks base method.
func (m *MockAuditor) MakeAuditRecord(arg0, arg1 string) *model.AuditRecord {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAuditRecord", arg0, arg1)
	ret0, _ := ret[0].(*model.AuditRecord)
	return ret0
}

// MakeAuditRecord indicates an expected call of MakeAuditRecord.
func (mr *MockAuditorMockRecorder) MakeAuditRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAuditRecord", reflect.TypeOf((*MockAuditor)(nil).MakeAuditRecord), arg0, arg1)
}
