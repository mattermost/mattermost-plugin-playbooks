// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-playbooks/server/app (interfaces: LicenseChecker)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLicenseChecker is a mock of LicenseChecker interface
type MockLicenseChecker struct {
	ctrl     *gomock.Controller
	recorder *MockLicenseCheckerMockRecorder
}

// MockLicenseCheckerMockRecorder is the mock recorder for MockLicenseChecker
type MockLicenseCheckerMockRecorder struct {
	mock *MockLicenseChecker
}

// NewMockLicenseChecker creates a new mock instance
func NewMockLicenseChecker(ctrl *gomock.Controller) *MockLicenseChecker {
	mock := &MockLicenseChecker{ctrl: ctrl}
	mock.recorder = &MockLicenseCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLicenseChecker) EXPECT() *MockLicenseCheckerMockRecorder {
	return m.recorder
}

// RetrospectiveAllowed mocks base method
func (m *MockLicenseChecker) RetrospectiveAllowed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrospectiveAllowed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RetrospectiveAllowed indicates an expected call of RetrospectiveAllowed
func (mr *MockLicenseCheckerMockRecorder) RetrospectiveAllowed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrospectiveAllowed", reflect.TypeOf((*MockLicenseChecker)(nil).RetrospectiveAllowed))
}
