// Code generated by MockGen. DO NOT EDIT.
// Source: server/app/playbook.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	app "github.com/mattermost/mattermost-plugin-playbooks/server/app"
)

// MockChecklistCommon is a mock of ChecklistCommon interface.
type MockChecklistCommon struct {
	ctrl     *gomock.Controller
	recorder *MockChecklistCommonMockRecorder
}

// MockChecklistCommonMockRecorder is the mock recorder for MockChecklistCommon.
type MockChecklistCommonMockRecorder struct {
	mock *MockChecklistCommon
}

// NewMockChecklistCommon creates a new mock instance.
func NewMockChecklistCommon(ctrl *gomock.Controller) *MockChecklistCommon {
	mock := &MockChecklistCommon{ctrl: ctrl}
	mock.recorder = &MockChecklistCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecklistCommon) EXPECT() *MockChecklistCommonMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockChecklistCommon) GetItems() []app.ChecklistItemCommon {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems")
	ret0, _ := ret[0].([]app.ChecklistItemCommon)
	return ret0
}

// GetItems indicates an expected call of GetItems.
func (mr *MockChecklistCommonMockRecorder) GetItems() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockChecklistCommon)(nil).GetItems))
}

// MockChecklistItemCommon is a mock of ChecklistItemCommon interface.
type MockChecklistItemCommon struct {
	ctrl     *gomock.Controller
	recorder *MockChecklistItemCommonMockRecorder
}

// MockChecklistItemCommonMockRecorder is the mock recorder for MockChecklistItemCommon.
type MockChecklistItemCommonMockRecorder struct {
	mock *MockChecklistItemCommon
}

// NewMockChecklistItemCommon creates a new mock instance.
func NewMockChecklistItemCommon(ctrl *gomock.Controller) *MockChecklistItemCommon {
	mock := &MockChecklistItemCommon{ctrl: ctrl}
	mock.recorder = &MockChecklistItemCommonMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChecklistItemCommon) EXPECT() *MockChecklistItemCommonMockRecorder {
	return m.recorder
}

// GetAssigneeID mocks base method.
func (m *MockChecklistItemCommon) GetAssigneeID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssigneeID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAssigneeID indicates an expected call of GetAssigneeID.
func (mr *MockChecklistItemCommonMockRecorder) GetAssigneeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssigneeID", reflect.TypeOf((*MockChecklistItemCommon)(nil).GetAssigneeID))
}

// SetAssigneeModified mocks base method.
func (m *MockChecklistItemCommon) SetAssigneeModified(modified int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetAssigneeModified", modified)
}

// SetAssigneeModified indicates an expected call of SetAssigneeModified.
func (mr *MockChecklistItemCommonMockRecorder) SetAssigneeModified(modified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAssigneeModified", reflect.TypeOf((*MockChecklistItemCommon)(nil).SetAssigneeModified), modified)
}

// SetCommandLastRun mocks base method.
func (m *MockChecklistItemCommon) SetCommandLastRun(lastRun int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCommandLastRun", lastRun)
}

// SetCommandLastRun indicates an expected call of SetCommandLastRun.
func (mr *MockChecklistItemCommonMockRecorder) SetCommandLastRun(lastRun interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCommandLastRun", reflect.TypeOf((*MockChecklistItemCommon)(nil).SetCommandLastRun), lastRun)
}

// SetState mocks base method.
func (m *MockChecklistItemCommon) SetState(state string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", state)
}

// SetState indicates an expected call of SetState.
func (mr *MockChecklistItemCommonMockRecorder) SetState(state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockChecklistItemCommon)(nil).SetState), state)
}

// SetStateModified mocks base method.
func (m *MockChecklistItemCommon) SetStateModified(modified int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStateModified", modified)
}

// SetStateModified indicates an expected call of SetStateModified.
func (mr *MockChecklistItemCommonMockRecorder) SetStateModified(modified interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateModified", reflect.TypeOf((*MockChecklistItemCommon)(nil).SetStateModified), modified)
}

// MockPlaybookService is a mock of PlaybookService interface.
type MockPlaybookService struct {
	ctrl     *gomock.Controller
	recorder *MockPlaybookServiceMockRecorder
}

// MockPlaybookServiceMockRecorder is the mock recorder for MockPlaybookService.
type MockPlaybookServiceMockRecorder struct {
	mock *MockPlaybookService
}

// NewMockPlaybookService creates a new mock instance.
func NewMockPlaybookService(ctrl *gomock.Controller) *MockPlaybookService {
	mock := &MockPlaybookService{ctrl: ctrl}
	mock.recorder = &MockPlaybookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaybookService) EXPECT() *MockPlaybookServiceMockRecorder {
	return m.recorder
}

// Archive mocks base method.
func (m *MockPlaybookService) Archive(playbook app.Playbook, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", playbook, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive.
func (mr *MockPlaybookServiceMockRecorder) Archive(playbook, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockPlaybookService)(nil).Archive), playbook, userID)
}

// AutoFollow mocks base method.
func (m *MockPlaybookService) AutoFollow(playbookID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoFollow", playbookID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoFollow indicates an expected call of AutoFollow.
func (mr *MockPlaybookServiceMockRecorder) AutoFollow(playbookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoFollow", reflect.TypeOf((*MockPlaybookService)(nil).AutoFollow), playbookID, userID)
}

// AutoUnfollow mocks base method.
func (m *MockPlaybookService) AutoUnfollow(playbookID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoUnfollow", playbookID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoUnfollow indicates an expected call of AutoUnfollow.
func (mr *MockPlaybookServiceMockRecorder) AutoUnfollow(playbookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoUnfollow", reflect.TypeOf((*MockPlaybookService)(nil).AutoUnfollow), playbookID, userID)
}

// Create mocks base method.
func (m *MockPlaybookService) Create(playbook app.Playbook, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", playbook, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlaybookServiceMockRecorder) Create(playbook, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaybookService)(nil).Create), playbook, userID)
}

// CreatePropertyField mocks base method.
func (m *MockPlaybookService) CreatePropertyField(playbookID string, propertyField app.PropertyField) (*app.PropertyField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePropertyField", playbookID, propertyField)
	ret0, _ := ret[0].(*app.PropertyField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePropertyField indicates an expected call of CreatePropertyField.
func (mr *MockPlaybookServiceMockRecorder) CreatePropertyField(playbookID, propertyField interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePropertyField", reflect.TypeOf((*MockPlaybookService)(nil).CreatePropertyField), playbookID, propertyField)
}

// DeletePropertyField mocks base method.
func (m *MockPlaybookService) DeletePropertyField(playbookID, propertyID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePropertyField", playbookID, propertyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePropertyField indicates an expected call of DeletePropertyField.
func (mr *MockPlaybookServiceMockRecorder) DeletePropertyField(playbookID, propertyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePropertyField", reflect.TypeOf((*MockPlaybookService)(nil).DeletePropertyField), playbookID, propertyID)
}

// Duplicate mocks base method.
func (m *MockPlaybookService) Duplicate(playbook app.Playbook, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duplicate", playbook, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Duplicate indicates an expected call of Duplicate.
func (mr *MockPlaybookServiceMockRecorder) Duplicate(playbook, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplicate", reflect.TypeOf((*MockPlaybookService)(nil).Duplicate), playbook, userID)
}

// Get mocks base method.
func (m *MockPlaybookService) Get(id string) (app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlaybookServiceMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlaybookService)(nil).Get), id)
}

// GetActivePlaybooks mocks base method.
func (m *MockPlaybookService) GetActivePlaybooks() ([]app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePlaybooks")
	ret0, _ := ret[0].([]app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePlaybooks indicates an expected call of GetActivePlaybooks.
func (mr *MockPlaybookServiceMockRecorder) GetActivePlaybooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePlaybooks", reflect.TypeOf((*MockPlaybookService)(nil).GetActivePlaybooks))
}

// GetAutoFollows mocks base method.
func (m *MockPlaybookService) GetAutoFollows(playbookID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoFollows", playbookID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoFollows indicates an expected call of GetAutoFollows.
func (mr *MockPlaybookServiceMockRecorder) GetAutoFollows(playbookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoFollows", reflect.TypeOf((*MockPlaybookService)(nil).GetAutoFollows), playbookID)
}

// GetPlaybooks mocks base method.
func (m *MockPlaybookService) GetPlaybooks() ([]app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooks")
	ret0, _ := ret[0].([]app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooks indicates an expected call of GetPlaybooks.
func (mr *MockPlaybookServiceMockRecorder) GetPlaybooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooks", reflect.TypeOf((*MockPlaybookService)(nil).GetPlaybooks))
}

// GetPlaybooksForTeam mocks base method.
func (m *MockPlaybookService) GetPlaybooksForTeam(requesterInfo app.RequesterInfo, teamID string, opts app.PlaybookFilterOptions) (app.GetPlaybooksResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooksForTeam", requesterInfo, teamID, opts)
	ret0, _ := ret[0].(app.GetPlaybooksResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooksForTeam indicates an expected call of GetPlaybooksForTeam.
func (mr *MockPlaybookServiceMockRecorder) GetPlaybooksForTeam(requesterInfo, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooksForTeam", reflect.TypeOf((*MockPlaybookService)(nil).GetPlaybooksForTeam), requesterInfo, teamID, opts)
}

// GetTopPlaybooksForTeam mocks base method.
func (m *MockPlaybookService) GetTopPlaybooksForTeam(teamID, userID string, opts *app.InsightsOpts) (*app.PlaybooksInsightsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPlaybooksForTeam", teamID, userID, opts)
	ret0, _ := ret[0].(*app.PlaybooksInsightsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPlaybooksForTeam indicates an expected call of GetTopPlaybooksForTeam.
func (mr *MockPlaybookServiceMockRecorder) GetTopPlaybooksForTeam(teamID, userID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPlaybooksForTeam", reflect.TypeOf((*MockPlaybookService)(nil).GetTopPlaybooksForTeam), teamID, userID, opts)
}

// GetTopPlaybooksForUser mocks base method.
func (m *MockPlaybookService) GetTopPlaybooksForUser(teamID, userID string, opts *app.InsightsOpts) (*app.PlaybooksInsightsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPlaybooksForUser", teamID, userID, opts)
	ret0, _ := ret[0].(*app.PlaybooksInsightsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPlaybooksForUser indicates an expected call of GetTopPlaybooksForUser.
func (mr *MockPlaybookServiceMockRecorder) GetTopPlaybooksForUser(teamID, userID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPlaybooksForUser", reflect.TypeOf((*MockPlaybookService)(nil).GetTopPlaybooksForUser), teamID, userID, opts)
}

// Import mocks base method.
func (m *MockPlaybookService) Import(playbook app.Playbook, userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", playbook, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import.
func (mr *MockPlaybookServiceMockRecorder) Import(playbook, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockPlaybookService)(nil).Import), playbook, userID)
}

// Restore mocks base method.
func (m *MockPlaybookService) Restore(playbook app.Playbook, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", playbook, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockPlaybookServiceMockRecorder) Restore(playbook, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockPlaybookService)(nil).Restore), playbook, userID)
}

// Update mocks base method.
func (m *MockPlaybookService) Update(playbook app.Playbook, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", playbook, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlaybookServiceMockRecorder) Update(playbook, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaybookService)(nil).Update), playbook, userID)
}

// UpdatePropertyField mocks base method.
func (m *MockPlaybookService) UpdatePropertyField(playbookID string, propertyField app.PropertyField) (*app.PropertyField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePropertyField", playbookID, propertyField)
	ret0, _ := ret[0].(*app.PropertyField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePropertyField indicates an expected call of UpdatePropertyField.
func (mr *MockPlaybookServiceMockRecorder) UpdatePropertyField(playbookID, propertyField interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePropertyField", reflect.TypeOf((*MockPlaybookService)(nil).UpdatePropertyField), playbookID, propertyField)
}

// MockPlaybookStore is a mock of PlaybookStore interface.
type MockPlaybookStore struct {
	ctrl     *gomock.Controller
	recorder *MockPlaybookStoreMockRecorder
}

// MockPlaybookStoreMockRecorder is the mock recorder for MockPlaybookStore.
type MockPlaybookStoreMockRecorder struct {
	mock *MockPlaybookStore
}

// NewMockPlaybookStore creates a new mock instance.
func NewMockPlaybookStore(ctrl *gomock.Controller) *MockPlaybookStore {
	mock := &MockPlaybookStore{ctrl: ctrl}
	mock.recorder = &MockPlaybookStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaybookStore) EXPECT() *MockPlaybookStoreMockRecorder {
	return m.recorder
}

// AddMetric mocks base method.
func (m *MockPlaybookStore) AddMetric(playbookID string, config app.PlaybookMetricConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMetric", playbookID, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMetric indicates an expected call of AddMetric.
func (mr *MockPlaybookStoreMockRecorder) AddMetric(playbookID, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMetric", reflect.TypeOf((*MockPlaybookStore)(nil).AddMetric), playbookID, config)
}

// AddPlaybookMember mocks base method.
func (m *MockPlaybookStore) AddPlaybookMember(id, memberID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPlaybookMember", id, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPlaybookMember indicates an expected call of AddPlaybookMember.
func (mr *MockPlaybookStoreMockRecorder) AddPlaybookMember(id, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPlaybookMember", reflect.TypeOf((*MockPlaybookStore)(nil).AddPlaybookMember), id, memberID)
}

// Archive mocks base method.
func (m *MockPlaybookStore) Archive(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive.
func (mr *MockPlaybookStoreMockRecorder) Archive(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockPlaybookStore)(nil).Archive), id)
}

// AutoFollow mocks base method.
func (m *MockPlaybookStore) AutoFollow(playbookID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoFollow", playbookID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoFollow indicates an expected call of AutoFollow.
func (mr *MockPlaybookStoreMockRecorder) AutoFollow(playbookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoFollow", reflect.TypeOf((*MockPlaybookStore)(nil).AutoFollow), playbookID, userID)
}

// AutoUnfollow mocks base method.
func (m *MockPlaybookStore) AutoUnfollow(playbookID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoUnfollow", playbookID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoUnfollow indicates an expected call of AutoUnfollow.
func (mr *MockPlaybookStoreMockRecorder) AutoUnfollow(playbookID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoUnfollow", reflect.TypeOf((*MockPlaybookStore)(nil).AutoUnfollow), playbookID, userID)
}

// BumpPlaybookUpdatedAt mocks base method.
func (m *MockPlaybookStore) BumpPlaybookUpdatedAt(playbookID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BumpPlaybookUpdatedAt", playbookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BumpPlaybookUpdatedAt indicates an expected call of BumpPlaybookUpdatedAt.
func (mr *MockPlaybookStoreMockRecorder) BumpPlaybookUpdatedAt(playbookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BumpPlaybookUpdatedAt", reflect.TypeOf((*MockPlaybookStore)(nil).BumpPlaybookUpdatedAt), playbookID)
}

// Create mocks base method.
func (m *MockPlaybookStore) Create(playbook app.Playbook) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", playbook)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlaybookStoreMockRecorder) Create(playbook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaybookStore)(nil).Create), playbook)
}

// DeleteMetric mocks base method.
func (m *MockPlaybookStore) DeleteMetric(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetric", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetric indicates an expected call of DeleteMetric.
func (mr *MockPlaybookStoreMockRecorder) DeleteMetric(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetric", reflect.TypeOf((*MockPlaybookStore)(nil).DeleteMetric), id)
}

// Get mocks base method.
func (m *MockPlaybookStore) Get(id string) (app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlaybookStoreMockRecorder) Get(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlaybookStore)(nil).Get), id)
}

// GetActivePlaybooks mocks base method.
func (m *MockPlaybookStore) GetActivePlaybooks() ([]app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePlaybooks")
	ret0, _ := ret[0].([]app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePlaybooks indicates an expected call of GetActivePlaybooks.
func (mr *MockPlaybookStoreMockRecorder) GetActivePlaybooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePlaybooks", reflect.TypeOf((*MockPlaybookStore)(nil).GetActivePlaybooks))
}

// GetAutoFollows mocks base method.
func (m *MockPlaybookStore) GetAutoFollows(playbookID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoFollows", playbookID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoFollows indicates an expected call of GetAutoFollows.
func (mr *MockPlaybookStoreMockRecorder) GetAutoFollows(playbookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoFollows", reflect.TypeOf((*MockPlaybookStore)(nil).GetAutoFollows), playbookID)
}

// GetMetric mocks base method.
func (m *MockPlaybookStore) GetMetric(id string) (*app.PlaybookMetricConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetric", id)
	ret0, _ := ret[0].(*app.PlaybookMetricConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetric indicates an expected call of GetMetric.
func (mr *MockPlaybookStoreMockRecorder) GetMetric(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetric", reflect.TypeOf((*MockPlaybookStore)(nil).GetMetric), id)
}

// GetPlaybookIDsForUser mocks base method.
func (m *MockPlaybookStore) GetPlaybookIDsForUser(userID, teamID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybookIDsForUser", userID, teamID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybookIDsForUser indicates an expected call of GetPlaybookIDsForUser.
func (mr *MockPlaybookStoreMockRecorder) GetPlaybookIDsForUser(userID, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybookIDsForUser", reflect.TypeOf((*MockPlaybookStore)(nil).GetPlaybookIDsForUser), userID, teamID)
}

// GetPlaybooks mocks base method.
func (m *MockPlaybookStore) GetPlaybooks() ([]app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooks")
	ret0, _ := ret[0].([]app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooks indicates an expected call of GetPlaybooks.
func (mr *MockPlaybookStoreMockRecorder) GetPlaybooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooks", reflect.TypeOf((*MockPlaybookStore)(nil).GetPlaybooks))
}

// GetPlaybooksActiveTotal mocks base method.
func (m *MockPlaybookStore) GetPlaybooksActiveTotal() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooksActiveTotal")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooksActiveTotal indicates an expected call of GetPlaybooksActiveTotal.
func (mr *MockPlaybookStoreMockRecorder) GetPlaybooksActiveTotal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooksActiveTotal", reflect.TypeOf((*MockPlaybookStore)(nil).GetPlaybooksActiveTotal))
}

// GetPlaybooksForTeam mocks base method.
func (m *MockPlaybookStore) GetPlaybooksForTeam(requesterInfo app.RequesterInfo, teamID string, opts app.PlaybookFilterOptions) (app.GetPlaybooksResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooksForTeam", requesterInfo, teamID, opts)
	ret0, _ := ret[0].(app.GetPlaybooksResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooksForTeam indicates an expected call of GetPlaybooksForTeam.
func (mr *MockPlaybookStoreMockRecorder) GetPlaybooksForTeam(requesterInfo, teamID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooksForTeam", reflect.TypeOf((*MockPlaybookStore)(nil).GetPlaybooksForTeam), requesterInfo, teamID, opts)
}

// GetPlaybooksWithKeywords mocks base method.
func (m *MockPlaybookStore) GetPlaybooksWithKeywords(opts app.PlaybookFilterOptions) ([]app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooksWithKeywords", opts)
	ret0, _ := ret[0].([]app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooksWithKeywords indicates an expected call of GetPlaybooksWithKeywords.
func (mr *MockPlaybookStoreMockRecorder) GetPlaybooksWithKeywords(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooksWithKeywords", reflect.TypeOf((*MockPlaybookStore)(nil).GetPlaybooksWithKeywords), opts)
}

// GetTimeLastUpdated mocks base method.
func (m *MockPlaybookStore) GetTimeLastUpdated(onlyPlaybooksWithKeywordsEnabled bool) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeLastUpdated", onlyPlaybooksWithKeywordsEnabled)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimeLastUpdated indicates an expected call of GetTimeLastUpdated.
func (mr *MockPlaybookStoreMockRecorder) GetTimeLastUpdated(onlyPlaybooksWithKeywordsEnabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeLastUpdated", reflect.TypeOf((*MockPlaybookStore)(nil).GetTimeLastUpdated), onlyPlaybooksWithKeywordsEnabled)
}

// GetTopPlaybooksForTeam mocks base method.
func (m *MockPlaybookStore) GetTopPlaybooksForTeam(teamID, userID string, opts *app.InsightsOpts) (*app.PlaybooksInsightsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPlaybooksForTeam", teamID, userID, opts)
	ret0, _ := ret[0].(*app.PlaybooksInsightsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPlaybooksForTeam indicates an expected call of GetTopPlaybooksForTeam.
func (mr *MockPlaybookStoreMockRecorder) GetTopPlaybooksForTeam(teamID, userID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPlaybooksForTeam", reflect.TypeOf((*MockPlaybookStore)(nil).GetTopPlaybooksForTeam), teamID, userID, opts)
}

// GetTopPlaybooksForUser mocks base method.
func (m *MockPlaybookStore) GetTopPlaybooksForUser(teamID, userID string, opts *app.InsightsOpts) (*app.PlaybooksInsightsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopPlaybooksForUser", teamID, userID, opts)
	ret0, _ := ret[0].(*app.PlaybooksInsightsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopPlaybooksForUser indicates an expected call of GetTopPlaybooksForUser.
func (mr *MockPlaybookStoreMockRecorder) GetTopPlaybooksForUser(teamID, userID, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopPlaybooksForUser", reflect.TypeOf((*MockPlaybookStore)(nil).GetTopPlaybooksForUser), teamID, userID, opts)
}

// GraphqlUpdate mocks base method.
func (m *MockPlaybookStore) GraphqlUpdate(id string, setmap map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphqlUpdate", id, setmap)
	ret0, _ := ret[0].(error)
	return ret0
}

// GraphqlUpdate indicates an expected call of GraphqlUpdate.
func (mr *MockPlaybookStoreMockRecorder) GraphqlUpdate(id, setmap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphqlUpdate", reflect.TypeOf((*MockPlaybookStore)(nil).GraphqlUpdate), id, setmap)
}

// RemovePlaybookMember mocks base method.
func (m *MockPlaybookStore) RemovePlaybookMember(id, memberID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePlaybookMember", id, memberID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePlaybookMember indicates an expected call of RemovePlaybookMember.
func (mr *MockPlaybookStoreMockRecorder) RemovePlaybookMember(id, memberID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePlaybookMember", reflect.TypeOf((*MockPlaybookStore)(nil).RemovePlaybookMember), id, memberID)
}

// Restore mocks base method.
func (m *MockPlaybookStore) Restore(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore.
func (mr *MockPlaybookStoreMockRecorder) Restore(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockPlaybookStore)(nil).Restore), id)
}

// Update mocks base method.
func (m *MockPlaybookStore) Update(playbook app.Playbook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", playbook)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlaybookStoreMockRecorder) Update(playbook interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaybookStore)(nil).Update), playbook)
}

// UpdateMetric mocks base method.
func (m *MockPlaybookStore) UpdateMetric(id string, setmap map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", id, setmap)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockPlaybookStoreMockRecorder) UpdateMetric(id, setmap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockPlaybookStore)(nil).UpdateMetric), id, setmap)
}
