// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-playbooks/server/app (interfaces: PlaybookService)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	gomock "github.com/golang/mock/gomock"
	app "github.com/mattermost/mattermost-plugin-playbooks/server/app"
	model "github.com/mattermost/mattermost-server/v6/model"
	reflect "reflect"
)

// MockPlaybookService is a mock of PlaybookService interface
type MockPlaybookService struct {
	ctrl     *gomock.Controller
	recorder *MockPlaybookServiceMockRecorder
}

// MockPlaybookServiceMockRecorder is the mock recorder for MockPlaybookService
type MockPlaybookServiceMockRecorder struct {
	mock *MockPlaybookService
}

// NewMockPlaybookService creates a new mock instance
func NewMockPlaybookService(ctrl *gomock.Controller) *MockPlaybookService {
	mock := &MockPlaybookService{ctrl: ctrl}
	mock.recorder = &MockPlaybookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlaybookService) EXPECT() *MockPlaybookServiceMockRecorder {
	return m.recorder
}

// Archive mocks base method
func (m *MockPlaybookService) Archive(arg0 app.Playbook, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Archive", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Archive indicates an expected call of Archive
func (mr *MockPlaybookServiceMockRecorder) Archive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Archive", reflect.TypeOf((*MockPlaybookService)(nil).Archive), arg0, arg1)
}

// AutoFollow mocks base method
func (m *MockPlaybookService) AutoFollow(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoFollow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoFollow indicates an expected call of AutoFollow
func (mr *MockPlaybookServiceMockRecorder) AutoFollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoFollow", reflect.TypeOf((*MockPlaybookService)(nil).AutoFollow), arg0, arg1)
}

// AutoUnfollow mocks base method
func (m *MockPlaybookService) AutoUnfollow(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AutoUnfollow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoUnfollow indicates an expected call of AutoUnfollow
func (mr *MockPlaybookServiceMockRecorder) AutoUnfollow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoUnfollow", reflect.TypeOf((*MockPlaybookService)(nil).AutoUnfollow), arg0, arg1)
}

// Create mocks base method
func (m *MockPlaybookService) Create(arg0 app.Playbook, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockPlaybookServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaybookService)(nil).Create), arg0, arg1)
}

// Duplicate mocks base method
func (m *MockPlaybookService) Duplicate(arg0 app.Playbook, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Duplicate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Duplicate indicates an expected call of Duplicate
func (mr *MockPlaybookServiceMockRecorder) Duplicate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Duplicate", reflect.TypeOf((*MockPlaybookService)(nil).Duplicate), arg0, arg1)
}

// Get mocks base method
func (m *MockPlaybookService) Get(arg0 string) (app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPlaybookServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlaybookService)(nil).Get), arg0)
}

// GetAutoFollows mocks base method
func (m *MockPlaybookService) GetAutoFollows(arg0 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAutoFollows", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAutoFollows indicates an expected call of GetAutoFollows
func (mr *MockPlaybookServiceMockRecorder) GetAutoFollows(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAutoFollows", reflect.TypeOf((*MockPlaybookService)(nil).GetAutoFollows), arg0)
}

// GetPlaybooks mocks base method
func (m *MockPlaybookService) GetPlaybooks() ([]app.Playbook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooks")
	ret0, _ := ret[0].([]app.Playbook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooks indicates an expected call of GetPlaybooks
func (mr *MockPlaybookServiceMockRecorder) GetPlaybooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooks", reflect.TypeOf((*MockPlaybookService)(nil).GetPlaybooks))
}

// GetPlaybooksForTeam mocks base method
func (m *MockPlaybookService) GetPlaybooksForTeam(arg0 app.RequesterInfo, arg1 string, arg2 app.PlaybookFilterOptions) (app.GetPlaybooksResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaybooksForTeam", arg0, arg1, arg2)
	ret0, _ := ret[0].(app.GetPlaybooksResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaybooksForTeam indicates an expected call of GetPlaybooksForTeam
func (mr *MockPlaybookServiceMockRecorder) GetPlaybooksForTeam(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaybooksForTeam", reflect.TypeOf((*MockPlaybookService)(nil).GetPlaybooksForTeam), arg0, arg1, arg2)
}

// GetSuggestedPlaybooks mocks base method
func (m *MockPlaybookService) GetSuggestedPlaybooks(arg0, arg1, arg2 string) ([]*app.CachedPlaybook, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestedPlaybooks", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*app.CachedPlaybook)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// GetSuggestedPlaybooks indicates an expected call of GetSuggestedPlaybooks
func (mr *MockPlaybookServiceMockRecorder) GetSuggestedPlaybooks(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestedPlaybooks", reflect.TypeOf((*MockPlaybookService)(nil).GetSuggestedPlaybooks), arg0, arg1, arg2)
}

// Import mocks base method
func (m *MockPlaybookService) Import(arg0 app.Playbook, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import
func (mr *MockPlaybookServiceMockRecorder) Import(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockPlaybookService)(nil).Import), arg0, arg1)
}

// IsAutoFollowing mocks base method
func (m *MockPlaybookService) IsAutoFollowing(arg0, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoFollowing", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAutoFollowing indicates an expected call of IsAutoFollowing
func (mr *MockPlaybookServiceMockRecorder) IsAutoFollowing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoFollowing", reflect.TypeOf((*MockPlaybookService)(nil).IsAutoFollowing), arg0, arg1)
}

// MessageHasBeenPosted mocks base method
func (m *MockPlaybookService) MessageHasBeenPosted(arg0 string, arg1 *model.Post) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageHasBeenPosted", arg0, arg1)
}

// MessageHasBeenPosted indicates an expected call of MessageHasBeenPosted
func (mr *MockPlaybookServiceMockRecorder) MessageHasBeenPosted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageHasBeenPosted", reflect.TypeOf((*MockPlaybookService)(nil).MessageHasBeenPosted), arg0, arg1)
}

// Restore mocks base method
func (m *MockPlaybookService) Restore(arg0 app.Playbook, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restore indicates an expected call of Restore
func (mr *MockPlaybookServiceMockRecorder) Restore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockPlaybookService)(nil).Restore), arg0, arg1)
}

// Update mocks base method
func (m *MockPlaybookService) Update(arg0 app.Playbook, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPlaybookServiceMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaybookService)(nil).Update), arg0, arg1)
}
