// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-plugin-playbooks/server/app (interfaces: ChannelActionService)

// Package mock_app is a generated GoMock package.
package mock_app

import (
	gomock "github.com/golang/mock/gomock"
	app "github.com/mattermost/mattermost-plugin-playbooks/server/app"
	model "github.com/mattermost/mattermost-server/v6/model"
	reflect "reflect"
)

// MockChannelActionService is a mock of ChannelActionService interface
type MockChannelActionService struct {
	ctrl     *gomock.Controller
	recorder *MockChannelActionServiceMockRecorder
}

// MockChannelActionServiceMockRecorder is the mock recorder for MockChannelActionService
type MockChannelActionServiceMockRecorder struct {
	mock *MockChannelActionService
}

// NewMockChannelActionService creates a new mock instance
func NewMockChannelActionService(ctrl *gomock.Controller) *MockChannelActionService {
	mock := &MockChannelActionService{ctrl: ctrl}
	mock.recorder = &MockChannelActionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChannelActionService) EXPECT() *MockChannelActionServiceMockRecorder {
	return m.recorder
}

// CheckAndSendMessageOnJoin mocks base method
func (m *MockChannelActionService) CheckAndSendMessageOnJoin(arg0, arg1 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndSendMessageOnJoin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAndSendMessageOnJoin indicates an expected call of CheckAndSendMessageOnJoin
func (mr *MockChannelActionServiceMockRecorder) CheckAndSendMessageOnJoin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndSendMessageOnJoin", reflect.TypeOf((*MockChannelActionService)(nil).CheckAndSendMessageOnJoin), arg0, arg1)
}

// Create mocks base method
func (m *MockChannelActionService) Create(arg0 app.GenericChannelAction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockChannelActionServiceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockChannelActionService)(nil).Create), arg0)
}

// Get mocks base method
func (m *MockChannelActionService) Get(arg0 string) (app.GenericChannelAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(app.GenericChannelAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockChannelActionServiceMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockChannelActionService)(nil).Get), arg0)
}

// GetChannelActions mocks base method
func (m *MockChannelActionService) GetChannelActions(arg0 string, arg1 app.GetChannelActionOptions) ([]app.GenericChannelAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelActions", arg0, arg1)
	ret0, _ := ret[0].([]app.GenericChannelAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelActions indicates an expected call of GetChannelActions
func (mr *MockChannelActionServiceMockRecorder) GetChannelActions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelActions", reflect.TypeOf((*MockChannelActionService)(nil).GetChannelActions), arg0, arg1)
}

// MessageHasBeenPosted mocks base method
func (m *MockChannelActionService) MessageHasBeenPosted(arg0 string, arg1 *model.Post) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageHasBeenPosted", arg0, arg1)
}

// MessageHasBeenPosted indicates an expected call of MessageHasBeenPosted
func (mr *MockChannelActionServiceMockRecorder) MessageHasBeenPosted(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageHasBeenPosted", reflect.TypeOf((*MockChannelActionService)(nil).MessageHasBeenPosted), arg0, arg1)
}

// Update mocks base method
func (m *MockChannelActionService) Update(arg0 app.GenericChannelAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockChannelActionServiceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockChannelActionService)(nil).Update), arg0)
}

// UserHasJoinedChannel mocks base method
func (m *MockChannelActionService) UserHasJoinedChannel(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserHasJoinedChannel", arg0, arg1, arg2)
}

// UserHasJoinedChannel indicates an expected call of UserHasJoinedChannel
func (mr *MockChannelActionServiceMockRecorder) UserHasJoinedChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHasJoinedChannel", reflect.TypeOf((*MockChannelActionService)(nil).UserHasJoinedChannel), arg0, arg1, arg2)
}

// Validate mocks base method
func (m *MockChannelActionService) Validate(arg0 app.GenericChannelAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *MockChannelActionServiceMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockChannelActionService)(nil).Validate), arg0)
}
