/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n    query RunStatusModal($runID: String!) {\n        run(id: $runID) {\n            id\n            name\n            teamID\n            ...DefaultMessage\n            ...ReminderTimer\n            broadcastChannelIDs\n            statusUpdateBroadcastChannelsEnabled\n            checklists {\n                items {\n                    state\n                }\n            }\n            followers\n        }\n    }\n": types.RunStatusModalDocument,
    "\n    fragment DefaultMessage on Run {\n        reminderMessageTemplate\n        statusPosts {\n            id\n            deleteAt\n        }\n    }\n": types.DefaultMessageFragmentDoc,
    "\n    fragment ReminderTimer on Run {\n        previousReminder\n        reminderTimerDefaultSeconds\n        statusPosts {\n            deleteAt\n        }\n    }\n": types.ReminderTimerFragmentDoc,
    "\n    fragment PlaybookModalFields on Playbook {\n        id\n        title\n        is_favorite: isFavorite\n        public\n        team_id: teamID\n        members {\n            user_id: userID\n            scheme_roles: schemeRoles\n        }\n        default_playbook_member_role: defaultPlaybookMemberRole\n        last_run_at: lastRunAt\n        active_runs: activeRuns\n    }\n": types.PlaybookModalFieldsFragmentDoc,
    "\n    query PlaybooksModal($channelID: String!, $teamID: String!, $searchTerm: String!) {\n        channelPlaybooks: \truns(\n            channelID: $channelID,\n            first: 1000,\n        ) {\n            edges {\n                node {\n                    playbookID\n                }\n            }\n        }\n        yourPlaybooks: playbooks (teamID: $teamID, withMembershipOnly: true, searchTerm: $searchTerm) {\n            id\n            ...PlaybookModalFields\n        }\n        allPlaybooks: playbooks (teamID: $teamID, withMembershipOnly: false, searchTerm: $searchTerm) {\n            id\n            ...PlaybookModalFields\n        }\n    }\n": types.PlaybooksModalDocument,
    "\n    query RHSRuns(\n        $channelID: String!,\n        $sort: String!,\n        $direction: String!,\n        $status: String!,\n        $first: Int,\n        $after: String,\n    ) {\n        runs(\n            channelID: $channelID,\n            sort: $sort,\n            direction: $direction,\n            statuses: [$status],\n            first: $first,\n            after: $after,\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    name\n                    participantIDs\n                    ownerUserID\n                    playbookID\n                    playbook {\n                        title\n                    }\n                    numTasksClosed\n                    numTasks\n                    lastUpdatedAt\n                    type\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n": types.RhsRunsDocument,
    "\n    query PlaybookLHS($userID: String!, $teamID: String!, $types: [PlaybookRunType!]) {\n        runs (participantOrFollowerID: $userID, teamID: $teamID, sort: \"name\", statuses: [\"InProgress\"], types: $types){\n            edges {\n                node {\n                    id\n                    name\n                    isFavorite\n                    playbookID\n                    ownerUserID\n                    participantIDs\n                    followers\n                }\n            }\n        }\n        playbooks (teamID: $teamID, withMembershipOnly: true) {\n            id\n            title\n            isFavorite\n            public\n        }\n    }\n": types.PlaybookLhsDocument,
    "\n    query PlaybookRunReminder($runID: String!) {\n        run (id: $runID){\n            id\n            name\n            previousReminder\n            reminderTimerDefaultSeconds\n        }\n    }\n": types.PlaybookRunReminderDocument,
    "\n    query FirstActiveRunInChannel($channelID: String!) {\n        runs(\n            channelID: $channelID,\n            statuses: [\"InProgress\"],\n            first: 1,\n        ) {\n            edges {\n                node {\n                    id\n                    name\n                    previousReminder\n                    reminderTimerDefaultSeconds\n                }\n            }\n        }\n    }\n": types.FirstActiveRunInChannelDocument,
    "query Playbook($id: String!) {\n  playbook(id: $id) {\n    id\n    title\n    description\n    team_id: teamID\n    public\n    delete_at: deleteAt\n    default_playbook_member_role: defaultPlaybookMemberRole\n    invited_user_ids: invitedUserIDs\n    broadcast_channel_ids: broadcastChannelIDs\n    webhook_on_creation_urls: webhookOnCreationURLs\n    reminder_timer_default_seconds: reminderTimerDefaultSeconds\n    reminder_message_template: reminderMessageTemplate\n    broadcast_enabled: broadcastEnabled\n    webhook_on_status_update_enabled: webhookOnStatusUpdateEnabled\n    webhook_on_status_update_urls: webhookOnStatusUpdateURLs\n    status_update_enabled: statusUpdateEnabled\n    retrospective_enabled: retrospectiveEnabled\n    retrospective_reminder_interval_seconds: retrospectiveReminderIntervalSeconds\n    retrospective_template: retrospectiveTemplate\n    default_owner_id: defaultOwnerID\n    run_summary_template: runSummaryTemplate\n    run_summary_template_enabled: runSummaryTemplateEnabled\n    message_on_join: messageOnJoin\n    category_name: categoryName\n    invite_users_enabled: inviteUsersEnabled\n    default_owner_enabled: defaultOwnerEnabled\n    webhook_on_creation_enabled: webhookOnCreationEnabled\n    message_on_join_enabled: messageOnJoinEnabled\n    categorize_channel_enabled: categorizeChannelEnabled\n    create_public_playbook_run: createPublicPlaybookRun\n    channel_name_template: channelNameTemplate\n    create_channel_member_on_new_participant: createChannelMemberOnNewParticipant\n    remove_channel_member_on_removed_participant: removeChannelMemberOnRemovedParticipant\n    channel_id: channelID\n    channel_mode: channelMode\n    is_favorite: isFavorite\n    checklists {\n      title\n      items {\n        title\n        description\n        state\n        state_modified: stateModified\n        assignee_id: assigneeID\n        assignee_modified: assigneeModified\n        command\n        command_last_run: commandLastRun\n        due_date: dueDate\n        task_actions: taskActions {\n          trigger: trigger {\n            type\n            payload\n          }\n          actions: actions {\n            type\n            payload\n          }\n        }\n      }\n    }\n    members {\n      user_id: userID\n      roles\n      scheme_roles: schemeRoles\n    }\n    metrics {\n      id\n      title\n      description\n      type\n      target\n    }\n  }\n}\n\nmutation UpdatePlaybookFavorite($id: String!, $favorite: Boolean!) {\n  updatePlaybookFavorite(id: $id, favorite: $favorite)\n}\n\nmutation UpdatePlaybook($id: String!, $updates: PlaybookUpdates!) {\n  updatePlaybook(id: $id, updates: $updates)\n}\n\nmutation AddPlaybookMember($playbookID: String!, $userID: String!) {\n  addPlaybookMember(playbookID: $playbookID, userID: $userID)\n}\n\nmutation RemovePlaybookMember($playbookID: String!, $userID: String!) {\n  removePlaybookMember(playbookID: $playbookID, userID: $userID)\n}": types.PlaybookDocument,
    "mutation SetRunFavorite($id: String!, $fav: Boolean!) {\n  setRunFavorite(id: $id, fav: $fav)\n}\n\nmutation UpdateRun($id: String!, $updates: RunUpdates!) {\n  updateRun(id: $id, updates: $updates)\n}\n\nmutation AddRunParticipants($runID: String!, $userIDs: [String!]!, $forceAddToChannel: Boolean = false) {\n  addRunParticipants(\n    runID: $runID\n    userIDs: $userIDs\n    forceAddToChannel: $forceAddToChannel\n  )\n}\n\nmutation RemoveRunParticipants($runID: String!, $userIDs: [String!]!) {\n  removeRunParticipants(runID: $runID, userIDs: $userIDs)\n}\n\nmutation ChangeRunOwner($runID: String!, $ownerID: String!) {\n  changeRunOwner(runID: $runID, ownerID: $ownerID)\n}\n\nmutation UpdateRunTaskActions($runID: String!, $checklistNum: Float!, $itemNum: Float!, $taskActions: [TaskActionUpdates!]!) {\n  updateRunTaskActions(\n    runID: $runID\n    checklistNum: $checklistNum\n    itemNum: $itemNum\n    taskActions: $taskActions\n  )\n}": types.SetRunFavoriteDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query RunStatusModal($runID: String!) {\n        run(id: $runID) {\n            id\n            name\n            teamID\n            ...DefaultMessage\n            ...ReminderTimer\n            broadcastChannelIDs\n            statusUpdateBroadcastChannelsEnabled\n            checklists {\n                items {\n                    state\n                }\n            }\n            followers\n        }\n    }\n"): (typeof documents)["\n    query RunStatusModal($runID: String!) {\n        run(id: $runID) {\n            id\n            name\n            teamID\n            ...DefaultMessage\n            ...ReminderTimer\n            broadcastChannelIDs\n            statusUpdateBroadcastChannelsEnabled\n            checklists {\n                items {\n                    state\n                }\n            }\n            followers\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment DefaultMessage on Run {\n        reminderMessageTemplate\n        statusPosts {\n            id\n            deleteAt\n        }\n    }\n"): (typeof documents)["\n    fragment DefaultMessage on Run {\n        reminderMessageTemplate\n        statusPosts {\n            id\n            deleteAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment ReminderTimer on Run {\n        previousReminder\n        reminderTimerDefaultSeconds\n        statusPosts {\n            deleteAt\n        }\n    }\n"): (typeof documents)["\n    fragment ReminderTimer on Run {\n        previousReminder\n        reminderTimerDefaultSeconds\n        statusPosts {\n            deleteAt\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    fragment PlaybookModalFields on Playbook {\n        id\n        title\n        is_favorite: isFavorite\n        public\n        team_id: teamID\n        members {\n            user_id: userID\n            scheme_roles: schemeRoles\n        }\n        default_playbook_member_role: defaultPlaybookMemberRole\n        last_run_at: lastRunAt\n        active_runs: activeRuns\n    }\n"): (typeof documents)["\n    fragment PlaybookModalFields on Playbook {\n        id\n        title\n        is_favorite: isFavorite\n        public\n        team_id: teamID\n        members {\n            user_id: userID\n            scheme_roles: schemeRoles\n        }\n        default_playbook_member_role: defaultPlaybookMemberRole\n        last_run_at: lastRunAt\n        active_runs: activeRuns\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PlaybooksModal($channelID: String!, $teamID: String!, $searchTerm: String!) {\n        channelPlaybooks: \truns(\n            channelID: $channelID,\n            first: 1000,\n        ) {\n            edges {\n                node {\n                    playbookID\n                }\n            }\n        }\n        yourPlaybooks: playbooks (teamID: $teamID, withMembershipOnly: true, searchTerm: $searchTerm) {\n            id\n            ...PlaybookModalFields\n        }\n        allPlaybooks: playbooks (teamID: $teamID, withMembershipOnly: false, searchTerm: $searchTerm) {\n            id\n            ...PlaybookModalFields\n        }\n    }\n"): (typeof documents)["\n    query PlaybooksModal($channelID: String!, $teamID: String!, $searchTerm: String!) {\n        channelPlaybooks: \truns(\n            channelID: $channelID,\n            first: 1000,\n        ) {\n            edges {\n                node {\n                    playbookID\n                }\n            }\n        }\n        yourPlaybooks: playbooks (teamID: $teamID, withMembershipOnly: true, searchTerm: $searchTerm) {\n            id\n            ...PlaybookModalFields\n        }\n        allPlaybooks: playbooks (teamID: $teamID, withMembershipOnly: false, searchTerm: $searchTerm) {\n            id\n            ...PlaybookModalFields\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query RHSRuns(\n        $channelID: String!,\n        $sort: String!,\n        $direction: String!,\n        $status: String!,\n        $first: Int,\n        $after: String,\n    ) {\n        runs(\n            channelID: $channelID,\n            sort: $sort,\n            direction: $direction,\n            statuses: [$status],\n            first: $first,\n            after: $after,\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    name\n                    participantIDs\n                    ownerUserID\n                    playbookID\n                    playbook {\n                        title\n                    }\n                    numTasksClosed\n                    numTasks\n                    lastUpdatedAt\n                    type\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n"): (typeof documents)["\n    query RHSRuns(\n        $channelID: String!,\n        $sort: String!,\n        $direction: String!,\n        $status: String!,\n        $first: Int,\n        $after: String,\n    ) {\n        runs(\n            channelID: $channelID,\n            sort: $sort,\n            direction: $direction,\n            statuses: [$status],\n            first: $first,\n            after: $after,\n        ) {\n            totalCount\n            edges {\n                node {\n                    id\n                    name\n                    participantIDs\n                    ownerUserID\n                    playbookID\n                    playbook {\n                        title\n                    }\n                    numTasksClosed\n                    numTasks\n                    lastUpdatedAt\n                    type\n                }\n            }\n            pageInfo {\n                endCursor\n                hasNextPage\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PlaybookLHS($userID: String!, $teamID: String!, $types: [PlaybookRunType!]) {\n        runs (participantOrFollowerID: $userID, teamID: $teamID, sort: \"name\", statuses: [\"InProgress\"], types: $types){\n            edges {\n                node {\n                    id\n                    name\n                    isFavorite\n                    playbookID\n                    ownerUserID\n                    participantIDs\n                    followers\n                }\n            }\n        }\n        playbooks (teamID: $teamID, withMembershipOnly: true) {\n            id\n            title\n            isFavorite\n            public\n        }\n    }\n"): (typeof documents)["\n    query PlaybookLHS($userID: String!, $teamID: String!, $types: [PlaybookRunType!]) {\n        runs (participantOrFollowerID: $userID, teamID: $teamID, sort: \"name\", statuses: [\"InProgress\"], types: $types){\n            edges {\n                node {\n                    id\n                    name\n                    isFavorite\n                    playbookID\n                    ownerUserID\n                    participantIDs\n                    followers\n                }\n            }\n        }\n        playbooks (teamID: $teamID, withMembershipOnly: true) {\n            id\n            title\n            isFavorite\n            public\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query PlaybookRunReminder($runID: String!) {\n        run (id: $runID){\n            id\n            name\n            previousReminder\n            reminderTimerDefaultSeconds\n        }\n    }\n"): (typeof documents)["\n    query PlaybookRunReminder($runID: String!) {\n        run (id: $runID){\n            id\n            name\n            previousReminder\n            reminderTimerDefaultSeconds\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FirstActiveRunInChannel($channelID: String!) {\n        runs(\n            channelID: $channelID,\n            statuses: [\"InProgress\"],\n            first: 1,\n        ) {\n            edges {\n                node {\n                    id\n                    name\n                    previousReminder\n                    reminderTimerDefaultSeconds\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query FirstActiveRunInChannel($channelID: String!) {\n        runs(\n            channelID: $channelID,\n            statuses: [\"InProgress\"],\n            first: 1,\n        ) {\n            edges {\n                node {\n                    id\n                    name\n                    previousReminder\n                    reminderTimerDefaultSeconds\n                }\n            }\n        }\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Playbook($id: String!) {\n  playbook(id: $id) {\n    id\n    title\n    description\n    team_id: teamID\n    public\n    delete_at: deleteAt\n    default_playbook_member_role: defaultPlaybookMemberRole\n    invited_user_ids: invitedUserIDs\n    broadcast_channel_ids: broadcastChannelIDs\n    webhook_on_creation_urls: webhookOnCreationURLs\n    reminder_timer_default_seconds: reminderTimerDefaultSeconds\n    reminder_message_template: reminderMessageTemplate\n    broadcast_enabled: broadcastEnabled\n    webhook_on_status_update_enabled: webhookOnStatusUpdateEnabled\n    webhook_on_status_update_urls: webhookOnStatusUpdateURLs\n    status_update_enabled: statusUpdateEnabled\n    retrospective_enabled: retrospectiveEnabled\n    retrospective_reminder_interval_seconds: retrospectiveReminderIntervalSeconds\n    retrospective_template: retrospectiveTemplate\n    default_owner_id: defaultOwnerID\n    run_summary_template: runSummaryTemplate\n    run_summary_template_enabled: runSummaryTemplateEnabled\n    message_on_join: messageOnJoin\n    category_name: categoryName\n    invite_users_enabled: inviteUsersEnabled\n    default_owner_enabled: defaultOwnerEnabled\n    webhook_on_creation_enabled: webhookOnCreationEnabled\n    message_on_join_enabled: messageOnJoinEnabled\n    categorize_channel_enabled: categorizeChannelEnabled\n    create_public_playbook_run: createPublicPlaybookRun\n    channel_name_template: channelNameTemplate\n    create_channel_member_on_new_participant: createChannelMemberOnNewParticipant\n    remove_channel_member_on_removed_participant: removeChannelMemberOnRemovedParticipant\n    channel_id: channelID\n    channel_mode: channelMode\n    is_favorite: isFavorite\n    checklists {\n      title\n      items {\n        title\n        description\n        state\n        state_modified: stateModified\n        assignee_id: assigneeID\n        assignee_modified: assigneeModified\n        command\n        command_last_run: commandLastRun\n        due_date: dueDate\n        task_actions: taskActions {\n          trigger: trigger {\n            type\n            payload\n          }\n          actions: actions {\n            type\n            payload\n          }\n        }\n      }\n    }\n    members {\n      user_id: userID\n      roles\n      scheme_roles: schemeRoles\n    }\n    metrics {\n      id\n      title\n      description\n      type\n      target\n    }\n  }\n}\n\nmutation UpdatePlaybookFavorite($id: String!, $favorite: Boolean!) {\n  updatePlaybookFavorite(id: $id, favorite: $favorite)\n}\n\nmutation UpdatePlaybook($id: String!, $updates: PlaybookUpdates!) {\n  updatePlaybook(id: $id, updates: $updates)\n}\n\nmutation AddPlaybookMember($playbookID: String!, $userID: String!) {\n  addPlaybookMember(playbookID: $playbookID, userID: $userID)\n}\n\nmutation RemovePlaybookMember($playbookID: String!, $userID: String!) {\n  removePlaybookMember(playbookID: $playbookID, userID: $userID)\n}"): (typeof documents)["query Playbook($id: String!) {\n  playbook(id: $id) {\n    id\n    title\n    description\n    team_id: teamID\n    public\n    delete_at: deleteAt\n    default_playbook_member_role: defaultPlaybookMemberRole\n    invited_user_ids: invitedUserIDs\n    broadcast_channel_ids: broadcastChannelIDs\n    webhook_on_creation_urls: webhookOnCreationURLs\n    reminder_timer_default_seconds: reminderTimerDefaultSeconds\n    reminder_message_template: reminderMessageTemplate\n    broadcast_enabled: broadcastEnabled\n    webhook_on_status_update_enabled: webhookOnStatusUpdateEnabled\n    webhook_on_status_update_urls: webhookOnStatusUpdateURLs\n    status_update_enabled: statusUpdateEnabled\n    retrospective_enabled: retrospectiveEnabled\n    retrospective_reminder_interval_seconds: retrospectiveReminderIntervalSeconds\n    retrospective_template: retrospectiveTemplate\n    default_owner_id: defaultOwnerID\n    run_summary_template: runSummaryTemplate\n    run_summary_template_enabled: runSummaryTemplateEnabled\n    message_on_join: messageOnJoin\n    category_name: categoryName\n    invite_users_enabled: inviteUsersEnabled\n    default_owner_enabled: defaultOwnerEnabled\n    webhook_on_creation_enabled: webhookOnCreationEnabled\n    message_on_join_enabled: messageOnJoinEnabled\n    categorize_channel_enabled: categorizeChannelEnabled\n    create_public_playbook_run: createPublicPlaybookRun\n    channel_name_template: channelNameTemplate\n    create_channel_member_on_new_participant: createChannelMemberOnNewParticipant\n    remove_channel_member_on_removed_participant: removeChannelMemberOnRemovedParticipant\n    channel_id: channelID\n    channel_mode: channelMode\n    is_favorite: isFavorite\n    checklists {\n      title\n      items {\n        title\n        description\n        state\n        state_modified: stateModified\n        assignee_id: assigneeID\n        assignee_modified: assigneeModified\n        command\n        command_last_run: commandLastRun\n        due_date: dueDate\n        task_actions: taskActions {\n          trigger: trigger {\n            type\n            payload\n          }\n          actions: actions {\n            type\n            payload\n          }\n        }\n      }\n    }\n    members {\n      user_id: userID\n      roles\n      scheme_roles: schemeRoles\n    }\n    metrics {\n      id\n      title\n      description\n      type\n      target\n    }\n  }\n}\n\nmutation UpdatePlaybookFavorite($id: String!, $favorite: Boolean!) {\n  updatePlaybookFavorite(id: $id, favorite: $favorite)\n}\n\nmutation UpdatePlaybook($id: String!, $updates: PlaybookUpdates!) {\n  updatePlaybook(id: $id, updates: $updates)\n}\n\nmutation AddPlaybookMember($playbookID: String!, $userID: String!) {\n  addPlaybookMember(playbookID: $playbookID, userID: $userID)\n}\n\nmutation RemovePlaybookMember($playbookID: String!, $userID: String!) {\n  removePlaybookMember(playbookID: $playbookID, userID: $userID)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation SetRunFavorite($id: String!, $fav: Boolean!) {\n  setRunFavorite(id: $id, fav: $fav)\n}\n\nmutation UpdateRun($id: String!, $updates: RunUpdates!) {\n  updateRun(id: $id, updates: $updates)\n}\n\nmutation AddRunParticipants($runID: String!, $userIDs: [String!]!, $forceAddToChannel: Boolean = false) {\n  addRunParticipants(\n    runID: $runID\n    userIDs: $userIDs\n    forceAddToChannel: $forceAddToChannel\n  )\n}\n\nmutation RemoveRunParticipants($runID: String!, $userIDs: [String!]!) {\n  removeRunParticipants(runID: $runID, userIDs: $userIDs)\n}\n\nmutation ChangeRunOwner($runID: String!, $ownerID: String!) {\n  changeRunOwner(runID: $runID, ownerID: $ownerID)\n}\n\nmutation UpdateRunTaskActions($runID: String!, $checklistNum: Float!, $itemNum: Float!, $taskActions: [TaskActionUpdates!]!) {\n  updateRunTaskActions(\n    runID: $runID\n    checklistNum: $checklistNum\n    itemNum: $itemNum\n    taskActions: $taskActions\n  )\n}"): (typeof documents)["mutation SetRunFavorite($id: String!, $fav: Boolean!) {\n  setRunFavorite(id: $id, fav: $fav)\n}\n\nmutation UpdateRun($id: String!, $updates: RunUpdates!) {\n  updateRun(id: $id, updates: $updates)\n}\n\nmutation AddRunParticipants($runID: String!, $userIDs: [String!]!, $forceAddToChannel: Boolean = false) {\n  addRunParticipants(\n    runID: $runID\n    userIDs: $userIDs\n    forceAddToChannel: $forceAddToChannel\n  )\n}\n\nmutation RemoveRunParticipants($runID: String!, $userIDs: [String!]!) {\n  removeRunParticipants(runID: $runID, userIDs: $userIDs)\n}\n\nmutation ChangeRunOwner($runID: String!, $ownerID: String!) {\n  changeRunOwner(runID: $runID, ownerID: $ownerID)\n}\n\nmutation UpdateRunTaskActions($runID: String!, $checklistNum: Float!, $itemNum: Float!, $taskActions: [TaskActionUpdates!]!) {\n  updateRunTaskActions(\n    runID: $runID\n    checklistNum: $checklistNum\n    itemNum: $itemNum\n    taskActions: $taskActions\n  )\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;